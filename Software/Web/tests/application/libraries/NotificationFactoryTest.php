<?php

require_once '../application/libraries/NotificationFactory.php';
require_once '../application/libraries/UserFactory.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-27 at 12:22:51.
 */
class NotificationFactoryTest extends PHPUnit_Framework_TestCase {

    /**
     * @var NotificationFactory
     */
    protected $object;
    protected $userObject;
    
    protected $userA;
    protected $userB;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new NotificationFactory;
        $this->userObject = new UserFactory;
        
        $this->userA = $this->userObject->addUser(uniqid(), "VA", uniqid());
        $this->userB = $this->userObject->addUser(uniqid(), "MD", uniqid());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->userA->deleteUser();
        $this->userB->deleteUser();
    }

    /**
     * @covers NotificationFactory::getNotificationById
     */
    public function testGetNotificationById() {
        $notif = $this->object->getNotificationById(1);
        $this->assertTrue(is_object($notif));
    }

    /**
     * @covers NotificationFactory::getNotificationsForUser
     */
    public function testGetNotificationsForUser() {
        // have user A send notification to user B
        $this->object->sendNotificationToUser($this->userB->getId(), $this->userA->getId(), 1);
        
        // check to see if user B received the notification
        $notifications = $this->object->getNotificationsForUser($this->userB->getId());
        
        $this->assertTrue(is_array($notifications));
        $this->assertTrue(count($notifications) == 1);
        $this->assertTrue(is_object($notifications[0]));
        $this->assertTrue($notifications[0]->getNotificationType()->getId() == 1);
    }

    /**
     * @covers NotificationFactory::sendNotificationToUser
     */
    public function testSendNotificationToUser() {
        $this->testGetNotificationsForUser();
    }

    /**
     * @covers NotificationFactory::acknowledgeNotification
     */
    public function testAcknowledgeNotification() {
        // have user A send notification to user B
        $this->object->sendNotificationToUser($this->userB->getId(), $this->userA->getId(), 1);
        
        // check to see if user B received the notification
        $notifications = $this->object->getNotificationsForUser($this->userB->getId());
        
        $this->object->acknowledgeNotification($notifications[0]->getNotificationId(), true);
        
        // reload the object and see if it has been acknowledged
        $notifications = $this->object->getNotificationsForUser($this->userB->getId());
        
        $this->assertTrue($notifications[0]->isAcknowledged());
        $this->assertTrue($notifications[0]->getAcknowledged() >= -1 && $notifications[0]->getAcknowledged() <= 1);
    }

    /**
     * @covers NotificationFactory::createObjectFromData
     * @todo   Implement testCreateObjectFromData().
     */
//    public function testCreateObjectFromData() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }

}
