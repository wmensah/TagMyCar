<?php

require_once '../application/libraries/UserFactory.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-27 at 04:13:56.
 */
class UserFactoryTest extends PHPUnit_Framework_TestCase {

    /**
     * @var UserFactory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new UserFactory;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers UserFactory::getUser
     */
    public function testGetUser() {
        // add a user
        $newUser = $this->object->addUser("ABCD", "VA", uniqid());
        $newUserId = $newUser->getId();

        // get the new user added
        $user = $this->object->getUser($newUserId);
        $this->assertTrue($user->getId() == $newUserId);
        
        // check to make sure we have the basic requirements for the user
        $this->assertTrue($user->getId() > 0);
        $this->assertFalse(empty($user->getTag()));
        $this->assertFalse(empty($user->getMobileDeviceId()));
        $this->assertFalse(empty($user->getJoinDateUtc()));

        // term the user and see if we can get termed users
        $this->object->terminateUser($newUserId);
        
        $termedUser = $this->object->getUser($newUserId, null, null, null, true);
        $this->assertTrue($termedUser->isTerminated());
        
        // delete the user
        $user->deleteUser();

        // test to make sure user has been deleted
        $user = $this->object->getUser($newUserId);
        $this->assertFalse($user);
    }

    /**
     * @covers UserFactory::addUser
     * @todo   Implement testAddUser().
     */
    public function testAddUser() {
        $newUser = $this->object->addUser(uniqid(), "VA", uniqid());
        $this->assertTrue($newUser != false);
        $this->assertTrue($newUser->getId() > 0);

        // check that the join date is in the past
        $time = strtotime($newUser->getJoinDateUtc());
        $date = date('y-m-d', $time);
        $this->assertTrue($date < getdate());

        // check the new user's account has not been terminated
        $this->assertFalse($newUser->isTerminated());

        $newUser->deleteUser();

        // this should fail because no tag ID was provided
        $newUser = $this->object->addUser("", "", uniqid());
        $this->assertFalse(is_object($newUser));

        $newUser = $this->object->addUser(null, null, null);
        $this->assertFalse(is_object($newUser));
    }

    /**
     * @covers UserFactory::terminateUser
     * @todo   Implement testTerminateUser().
     */
    public function testTerminateUser() {
        $newUser = $this->object->addUser(uniqid(), "VA", uniqid());
        $this->assertTrue($newUser != false);

        // check the new user's account hsa not been terminated
        $this->assertFalse($newUser->isTerminated());

        $this->object->terminateUser($newUser->getId());

        // reload the user object and check if it's actually terminated
        $newUser = $this->object->getUser($newUser->getId(), null, null, null, true);
        $this->assertTrue(is_object($newUser));

        $newUser->deleteUser();
    }

    /**
     * @covers UserFactory::createObjectFromData
     * @todo   Implement testCreateObjectFromData().
     */
//    public function testCreateObjectFromData() {
//        // Remove the following lines when you implement this test.
//        $this->markTestIncomplete(
//                'This test has not been implemented yet.'
//        );
//    }

}
